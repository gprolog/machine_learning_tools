/*
* Copyright 2013 Mozilla Foundation
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
///<reference path='references.ts' />
var Shumway;
(function (Shumway) {
    /**
    * Provides a definition of AVM2 Bytecodes.
    *
    * Type (size) Prefix:
    *
    *   u08 - a one-byte unsigned integer
    *   s08 - a one-byte signed integer
    *   s24 - a three byte signed integer
    *   s16 - a variable-length encoded 30-bit unsigned integer value that is casted to a short value
    *   u30 - a variable-length encoded 30-bit unsigned integer value
    *
    * Type (semantic) Suffix:
    *
    *     I - an index into the integer constant pool
    *     U - an index into the unsigned integer constant pool
    *     D - an index into the doubles constant pool
    *     S - an index into the string constant pool
    *     N - an index into the namespace constant pool
    *     M - an index into the multiname constant pool
    *    CI - an index into the class info list
    *    EI - an index into the exception info list
    *    MI - an index into the method info list
    */
    (function (AVM2) {
        AVM2.opcodeTable = [
            null,
            { name: "bkpt", canThrow: false, operands: [] },
            { name: "nop", canThrow: false, operands: [] },
            { name: "throw", canThrow: true, operands: [] },
            { name: "getsuper", canThrow: true, operands: [{ name: "index", size: "u30", type: "" }] },
            { name: "setsuper", canThrow: true, operands: [{ name: "index", size: "u30", type: "" }] },
            { name: "dxns", canThrow: true, operands: [{ name: "index", size: "u30", type: "" }] },
            { name: "dxnslate", canThrow: true, operands: [] },
            { name: "kill", canThrow: false, operands: [{ name: "index", size: "u30", type: "" }] },
            { name: "label", canThrow: false, operands: [] },
            { name: "lf32x4", canThrow: true, operands: [] },
            { name: "sf32x4", canThrow: true, operands: [] },
            { name: "ifnlt", canThrow: true, operands: [{ name: "offset", size: "s24", type: "" }] },
            { name: "ifnle", canThrow: true, operands: [{ name: "offset", size: "s24", type: "" }] },
            { name: "ifngt", canThrow: true, operands: [{ name: "offset", size: "s24", type: "" }] },
            { name: "ifnge", canThrow: true, operands: [{ name: "offset", size: "s24", type: "" }] },
            { name: "jump", canThrow: false, operands: [{ name: "offset", size: "s24", type: "" }] },
            { name: "iftrue", canThrow: false, operands: [{ name: "offset", size: "s24", type: "" }] },
            { name: "iffalse", canThrow: false, operands: [{ name: "offset", size: "s24", type: "" }] },
            { name: "ifeq", canThrow: true, operands: [{ name: "offset", size: "s24", type: "" }] },
            { name: "ifne", canThrow: true, operands: [{ name: "offset", size: "s24", type: "" }] },
            { name: "iflt", canThrow: true, operands: [{ name: "offset", size: "s24", type: "" }] },
            { name: "ifle", canThrow: true, operands: [{ name: "offset", size: "s24", type: "" }] },
            { name: "ifgt", canThrow: true, operands: [{ name: "offset", size: "s24", type: "" }] },
            { name: "ifge", canThrow: true, operands: [{ name: "offset", size: "s24", type: "" }] },
            { name: "ifstricteq", canThrow: false, operands: [{ name: "offset", size: "s24", type: "" }] },
            { name: "ifstrictne", canThrow: false, operands: [{ name: "offset", size: "s24", type: "" }] },
            { name: "lookupswitch", canThrow: false, operands: null },
            { name: "pushwith", canThrow: false, operands: [] },
            { name: "popscope", canThrow: false, operands: [] },
            { name: "nextname", canThrow: true, operands: [] },
            { name: "hasnext", canThrow: true, operands: [] },
            { name: "pushnull", canThrow: false, operands: [] },
            { name: "pushundefined", canThrow: false, operands: [] },
            null,
            { name: "nextvalue", canThrow: true, operands: [] },
            { name: "pushbyte", canThrow: false, operands: [{ name: "value", size: "s08", type: "" }] },
            { name: "pushshort", canThrow: false, operands: [{ name: "value", size: "s16", type: "" }] },
            { name: "pushtrue", canThrow: false, operands: [] },
            { name: "pushfalse", canThrow: false, operands: [] },
            { name: "pushnan", canThrow: false, operands: [] },
            { name: "pop", canThrow: false, operands: [] },
            { name: "dup", canThrow: false, operands: [] },
            { name: "swap", canThrow: false, operands: [] },
            { name: "pushstring", canThrow: false, operands: [{ name: "index", size: "u30", type: "S" }] },
            { name: "pushint", canThrow: false, operands: [{ name: "index", size: "u30", type: "I" }] },
            { name: "pushuint", canThrow: false, operands: [{ name: "index", size: "u30", type: "U" }] },
            { name: "pushdouble", canThrow: false, operands: [{ name: "index", size: "u30", type: "D" }] },
            { name: "pushscope", canThrow: false, operands: [] },
            { name: "pushnamespace", canThrow: false, operands: [{ name: "index", size: "u30", type: "N" }] },
            { name: "hasnext2", canThrow: true, operands: [{ name: "object", size: "u30", type: "" }, { name: "index", size: "u30", type: "" }] },
            { name: "lix8", canThrow: true, operands: null },
            { name: "lix16", canThrow: true, operands: null },
            { name: "li8", canThrow: true, operands: [] },
            { name: "li16", canThrow: true, operands: [] },
            { name: "li32", canThrow: true, operands: [] },
            { name: "lf32", canThrow: true, operands: [] },
            { name: "lf64", canThrow: true, operands: [] },
            { name: "si8", canThrow: true, operands: [] },
            { name: "si16", canThrow: true, operands: [] },
            { name: "si32", canThrow: true, operands: [] },
            { name: "sf32", canThrow: true, operands: [] },
            { name: "sf64", canThrow: true, operands: [] },
            null,
            { name: "newfunction", canThrow: true, operands: [{ name: "index", size: "u30", type: "MI" }] },
            { name: "call", canThrow: true, operands: [{ name: "argCount", size: "u30", type: "" }] },
            { name: "construct", canThrow: true, operands: [{ name: "argCount", size: "u30", type: "" }] },
            { name: "callmethod", canThrow: true, operands: [{ name: "index", size: "u30", type: "" }, { name: "argCount", size: "u30", type: "" }] },
            { name: "callstatic", canThrow: true, operands: [{ name: "index", size: "u30", type: "MI" }, { name: "argCount", size: "u30", type: "" }] },
            { name: "callsuper", canThrow: true, operands: [{ name: "index", size: "u30", type: "M" }, { name: "argCount", size: "u30", type: "" }] },
            { name: "callproperty", canThrow: true, operands: [{ name: "index", size: "u30", type: "M" }, { name: "argCount", size: "u30", type: "" }] },
            { name: "returnvoid", canThrow: false, operands: [] },
            { name: "returnvalue", canThrow: true, operands: [] },
            { name: "constructsuper", canThrow: true, operands: [{ name: "argCount", size: "u30", type: "" }] },
            { name: "constructprop", canThrow: true, operands: [{ name: "index", size: "u30", type: "M" }, { name: "argCount", size: "u30", type: "" }] },
            { name: "callsuperid", canThrow: true, operands: null },
            { name: "callproplex", canThrow: true, operands: [{ name: "index", size: "u30", type: "M" }, { name: "argCount", size: "u30", type: "" }] },
            { name: "callinterface", canThrow: true, operands: null },
            { name: "callsupervoid", canThrow: true, operands: [{ name: "index", size: "u30", type: "M" }, { name: "argCount", size: "u30", type: "" }] },
            { name: "callpropvoid", canThrow: true, operands: [{ name: "index", size: "u30", type: "M" }, { name: "argCount", size: "u30", type: "" }] },
            { name: "sxi1", canThrow: false, operands: [] },
            { name: "sxi8", canThrow: false, operands: [] },
            { name: "sxi16", canThrow: false, operands: [] },
            { name: "applytype", canThrow: true, operands: [{ name: "argCount", size: "u30", type: "" }] },
            { name: "pushfloat4", canThrow: false, operands: null },
            { name: "newobject", canThrow: true, operands: [{ name: "argCount", size: "u30", type: "" }] },
            { name: "newarray", canThrow: true, operands: [{ name: "argCount", size: "u30", type: "" }] },
            { name: "newactivation", canThrow: true, operands: [] },
            { name: "newclass", canThrow: true, operands: [{ name: "index", size: "u30", type: "CI" }] },
            { name: "getdescendants", canThrow: true, operands: [{ name: "index", size: "u30", type: "M" }] },
            { name: "newcatch", canThrow: true, operands: [{ name: "index", size: "u30", type: "EI" }] },
            { name: "findpropglobalstrict", canThrow: true, operands: null },
            { name: "findpropglobal", canThrow: true, operands: null },
            { name: "findpropstrict", canThrow: true, operands: [{ name: "index", size: "u30", type: "M" }] },
            { name: "findproperty", canThrow: true, operands: [{ name: "index", size: "u30", type: "M" }] },
            { name: "finddef", canThrow: true, operands: null },
            { name: "getlex", canThrow: true, operands: [{ name: "index", size: "u30", type: "M" }] },
            { name: "setproperty", canThrow: true, operands: [{ name: "index", size: "u30", type: "M" }] },
            { name: "getlocal", canThrow: false, operands: [{ name: "index", size: "u30", type: "" }] },
            { name: "setlocal", canThrow: false, operands: [{ name: "index", size: "u30", type: "" }] },
            { name: "getglobalscope", canThrow: false, operands: [] },
            { name: "getscopeobject", canThrow: false, operands: [{ name: "index", size: "u30", type: "" }] },
            { name: "getproperty", canThrow: true, operands: [{ name: "index", size: "u30", type: "M" }] },
            { name: "getouterscope", canThrow: false, operands: null },
            { name: "initproperty", canThrow: true, operands: [{ name: "index", size: "u30", type: "M" }] },
            null,
            { name: "deleteproperty", canThrow: true, operands: [{ name: "index", size: "u30", type: "M" }] },
            null,
            { name: "getslot", canThrow: true, operands: [{ name: "index", size: "u30", type: "" }] },
            { name: "setslot", canThrow: true, operands: [{ name: "index", size: "u30", type: "" }] },
            { name: "getglobalslot", canThrow: false, operands: [{ name: "index", size: "u30", type: "" }] },
            { name: "setglobalslot", canThrow: false, operands: [{ name: "index", size: "u30", type: "" }] },
            { name: "convert_s", canThrow: true, operands: [] },
            { name: "esc_xelem", canThrow: true, operands: [] },
            { name: "esc_xattr", canThrow: true, operands: [] },
            { name: "convert_i", canThrow: true, operands: [] },
            { name: "convert_u", canThrow: true, operands: [] },
            { name: "convert_d", canThrow: true, operands: [] },
            { name: "convert_b", canThrow: true, operands: [] },
            { name: "convert_o", canThrow: true, operands: [] },
            { name: "checkfilter", canThrow: true, operands: [] },
            { name: "convert_f", canThrow: true, operands: [] },
            { name: "unplus", canThrow: true, operands: [] },
            { name: "convert_f4", canThrow: true, operands: [] },
            null,
            null,
            null,
            null,
            { name: "coerce", canThrow: true, operands: [{ name: "index", size: "u30", type: "M" }] },
            { name: "coerce_b", canThrow: true, operands: [] },
            { name: "coerce_a", canThrow: true, operands: [] },
            { name: "coerce_i", canThrow: true, operands: [] },
            { name: "coerce_d", canThrow: true, operands: [] },
            { name: "coerce_s", canThrow: true, operands: [] },
            { name: "astype", canThrow: true, operands: [{ name: "index", size: "u30", type: "M" }] },
            { name: "astypelate", canThrow: true, operands: [] },
            { name: "coerce_u", canThrow: true, operands: [] },
            { name: "coerce_o", canThrow: true, operands: [] },
            null,
            null,
            null,
            null,
            null,
            null,
            { name: "negate", canThrow: true, operands: [] },
            { name: "increment", canThrow: true, operands: [] },
            { name: "inclocal", canThrow: true, operands: [{ name: "index", size: "u30", type: "" }] },
            { name: "decrement", canThrow: true, operands: [] },
            { name: "declocal", canThrow: true, operands: [{ name: "index", size: "u30", type: "" }] },
            { name: "typeof", canThrow: false, operands: [] },
            { name: "not", canThrow: false, operands: [] },
            { name: "bitnot", canThrow: true, operands: [] },
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            { name: "add", canThrow: true, operands: [] },
            { name: "subtract", canThrow: true, operands: [] },
            { name: "multiply", canThrow: true, operands: [] },
            { name: "divide", canThrow: true, operands: [] },
            { name: "modulo", canThrow: true, operands: [] },
            { name: "lshift", canThrow: true, operands: [] },
            { name: "rshift", canThrow: true, operands: [] },
            { name: "urshift", canThrow: true, operands: [] },
            { name: "bitand", canThrow: true, operands: [] },
            { name: "bitor", canThrow: true, operands: [] },
            { name: "bitxor", canThrow: true, operands: [] },
            { name: "equals", canThrow: true, operands: [] },
            { name: "strictequals", canThrow: true, operands: [] },
            { name: "lessthan", canThrow: true, operands: [] },
            { name: "lessequals", canThrow: true, operands: [] },
            { name: "greaterthan", canThrow: true, operands: [] },
            { name: "greaterequals", canThrow: true, operands: [] },
            { name: "instanceof", canThrow: true, operands: [] },
            { name: "istype", canThrow: true, operands: [{ name: "index", size: "u30", type: "M" }] },
            { name: "istypelate", canThrow: true, operands: [] },
            { name: "in", canThrow: true, operands: [] },
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            { name: "increment_i", canThrow: true, operands: [] },
            { name: "decrement_i", canThrow: true, operands: [] },
            { name: "inclocal_i", canThrow: true, operands: [{ name: "index", size: "u30", type: "" }] },
            { name: "declocal_i", canThrow: true, operands: [{ name: "index", size: "u30", type: "" }] },
            { name: "negate_i", canThrow: true, operands: [] },
            { name: "add_i", canThrow: true, operands: [] },
            { name: "subtract_i", canThrow: true, operands: [] },
            { name: "multiply_i", canThrow: true, operands: [] },
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            { name: "getlocal0", canThrow: false, operands: [] },
            { name: "getlocal1", canThrow: false, operands: [] },
            { name: "getlocal2", canThrow: false, operands: [] },
            { name: "getlocal3", canThrow: false, operands: [] },
            { name: "setlocal0", canThrow: false, operands: [] },
            { name: "setlocal1", canThrow: false, operands: [] },
            { name: "setlocal2", canThrow: false, operands: [] },
            { name: "setlocal3", canThrow: false, operands: [] },
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            { name: "invalid", canThrow: false, operands: [] },
            null,
            { name: "debug", canThrow: true, operands: [{ name: "debugType", size: "u08", type: "" }, { name: "index", size: "u30", type: "S" }, { name: "reg", size: "u08", type: "" }, { name: "extra", size: "u30", type: "" }] },
            { name: "debugline", canThrow: true, operands: [{ name: "lineNumber", size: "u30", type: "" }] },
            { name: "debugfile", canThrow: true, operands: [{ name: "index", size: "u30", type: "S" }] },
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null
        ];

        function opcodeName(op) {
            return AVM2.opcodeTable[op].name;
        }
        AVM2.opcodeName = opcodeName;
    })(Shumway.AVM2 || (Shumway.AVM2 = {}));
    var AVM2 = Shumway.AVM2;
})(Shumway || (Shumway = {}));

var opcodeTable = Shumway.AVM2.opcodeTable;
var opcodeName = Shumway.AVM2.opcodeName;
